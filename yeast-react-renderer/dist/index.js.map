{"version":3,"file":"index.js","sources":["../src/helpers/useKey.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/helpers/diff.ts","../src/YeastNodeTypes/BlockCodeNodeRenderer.tsx","../src/YeastNodeTypes/BlockQuoteNodeRenderer.tsx","../src/YeastNodeTypes/BoldNodeRenderer.tsx","../src/YeastNodeTypes/CalloutNodeRenderer.tsx","../src/YeastNodeTypes/ContentGroupNodeRenderer.tsx","../src/YeastNodeTypes/HeadingNodeRenderer.tsx","../src/YeastNodeTypes/ImageNodeRenderer.tsx","../src/YeastNodeTypes/InlineCodeNodeRenderer.tsx","../src/YeastNodeTypes/ItalicNodeRenderer.tsx","../src/YeastNodeTypes/LinkNodeRenderer.tsx","../src/YeastNodeTypes/ListItemNodeRenderer.tsx","../src/YeastNodeTypes/ListNodeRenderer.tsx","../src/YeastNodeTypes/PragraphNodeRenderer.tsx","../src/YeastNodeTypes/StrikethroughNodeRenderer.tsx","../src/YeastNodeTypes/TableNodeRenderer.tsx","../src/YeastNodeTypes/HorizontalRuleNodeRenderer.tsx","../src/ReactRenderer.tsx","../src/YeastNodeRenderer.tsx","../src/YeastDocumentRenderer.tsx"],"sourcesContent":["// import { useRef } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport function useKey() {\n\t// Note: useRef was causing an error in React about hooks. Cause unclear.\n\t// return useRef<string>(uuidv4());\n\treturn { current: uuidv4() };\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { ReactNode } from 'react';\nimport {\n\tYeastNode,\n\tisYeastNode,\n\tYeastChild,\n\tDiffType,\n\tDiffSource,\n\tModificationAssignment,\n\tModificationData,\n\tModificationDiffMap,\n\tDiffPivotMap,\n} from 'yeast-core';\n\nexport interface DiffRenderData {\n\tdiffClass: string;\n\trenderedNodes?: RenderedNodes;\n\trenderedStrings?: RenderedStrings;\n}\n\nexport type RenderedNodes = {\n\t[textProperty: string]: ReactNode;\n};\nexport type RenderedStrings = {\n\t[textProperty: string]: {\n\t\toldString: string;\n\t\tnewString: string;\n\t};\n};\n\nconst addedClass: string = 'diff-added';\nconst removedClass: string = 'diff-removed';\nconst modifiedClassPrefix: string = 'diff-modified-';\n\n// Interprets the diff data associated with a yeast node and returns css classes, strings, and react nodes for display.\nexport function getDiffRenderData(diffNode: YeastChild): DiffRenderData | undefined {\n\tif (!diffNode.hasDiff) return;\n\n\t// init\n\tconst data: DiffRenderData = { diffClass: '' };\n\n\t// Class assignment for added/removed type is straightforward.\n\tif (diffNode.diffType === DiffType.Added) data.diffClass = addedClass;\n\tif (diffNode.diffType === DiffType.Removed) data.diffClass = removedClass;\n\n\t// Modification diff type requires more processing.\n\tconst isModification: boolean = diffNode.diffType === DiffType.Modified;\n\tconst isTextModification: boolean | undefined = diffNode.isTextModification;\n\tconst containsDiff: boolean | undefined = diffNode.containsDiff;\n\tconst areDiffPivotsPresent: boolean = diffNode.diffPivots && Object.keys(diffNode.diffPivots).length > 0;\n\n\tif (isModification) {\n\t\t// If the diff node includes text modifications, multiple node segments are needed for display\n\t\tif (isTextModification && areDiffPivotsPresent) {\n\t\t\t// Some node renderers require the rendered text modifications in string form, while others require nodes. Both are constructed here to be used as needed.\n\t\t\tconst renderedNodes: RenderedNodes = {};\n\t\t\tconst renderedStrings: RenderedStrings = {};\n\n\t\t\t/*\n\t\t\t * In a diff node, properties that have modified text contain the concatenation of the old and new string.\n\t\t\t * Diff mods contain the string index boundaries for the modified segments of the overall text of a modified property.\n\t\t\t * Diff pivots map a modified property to the string inded that separates the old and new segments of the concatenated string.\n\t\t\t * These are all used here to construct the appropriate node and string segments for displaying the diff.\n\t\t\t */\n\t\t\tfor (const [prop, pivot] of Object.entries(diffNode.diffPivots)) {\n\t\t\t\t// If submodications occur within the modified text, pass them to the renderNodeSegments function for further processing.\n\t\t\t\tif (diffNode.diffMods && diffNode.diffMods[prop]) {\n\t\t\t\t\trenderedNodes[prop] = React.createElement(React.Fragment, {}, ...renderNodeSegments(prop, diffNode.diffMods[prop], diffNode));\n\t\t\t\t}\n\t\t\t\t// Otherwise, just use the old and new strings in their entirety since no internal divisions are needed for diff display.\n\t\t\t\telse {\n\t\t\t\t\trenderedNodes[prop] = React.createElement(\n\t\t\t\t\t\tReact.Fragment,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tReact.createElement('span', { className: `${modifiedClassPrefix}old` }, diffNode[prop].substring(0, pivot)),\n\t\t\t\t\t\tReact.createElement('span', { className: `${modifiedClassPrefix}new` }, diffNode[prop].substring(pivot + 1, diffNode[prop.length]))\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// The string representation of modified text does not include css styling, so just split the old and new strings off of the concatenated string.\n\t\t\t\trenderedStrings[prop] = {\n\t\t\t\t\toldString: diffNode[prop].substring(0, pivot),\n\t\t\t\t\tnewString: diffNode[prop].substring(pivot + 1, diffNode[prop].length),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Append the rendered nodes and strings to the diff render data.\n\t\t\tdata.renderedNodes = renderedNodes;\n\t\t\tdata.renderedStrings = renderedStrings;\n\t\t}\n\t\t// If there is no text modification in either the node or its children, this is the right node depth at which to display the diff.\n\t\telse if (containsDiff === false) {\n\t\t\tif (diffNode.diffSource === DiffSource.Old) {\n\t\t\t\tdata.diffClass = `${modifiedClassPrefix}old`;\n\t\t\t}\n\t\t\tif (diffNode.diffSource === DiffSource.New) {\n\t\t\t\tdata.diffClass = `${modifiedClassPrefix}new`;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the diff render data.\n\treturn data;\n}\n\n// Interprets text modfication data to construct react nodes for displaying the diff.\nfunction renderNodeSegments(prop: string, modAssignment: ModificationAssignment, diffNode: YeastChild): ReactNode[] {\n\t// init\n\tconst { oldModData, newModData } = modAssignment;\n\tconst oldSegments: ReactNode[] = [];\n\tconst newSegments: ReactNode[] = [];\n\tconst renderedSegments: ReactNode[] = [];\n\n\t// Process the old and new modification data.\n\tprocessModAssignment(oldModData, prop, diffNode, oldSegments, DiffSource.Old);\n\tprocessModAssignment(newModData, prop, diffNode, newSegments, DiffSource.New);\n\n\t// If both old and new segments are present, nest them both in an outer span element.\n\tif (oldSegments.length > 0 && newSegments.length > 0) {\n\t\tconst oldWrapper = React.createElement('span', { className: `${modifiedClassPrefix}old-wrapper` }, ...oldSegments);\n\t\tconst newWrapper = React.createElement('span', { className: `${modifiedClassPrefix}new-wrapper` }, ...newSegments);\n\t\tconst fullWrapper = React.createElement('span', { className: `${modifiedClassPrefix}full-wrapper` }, oldWrapper, newWrapper);\n\t\trenderedSegments.push(fullWrapper);\n\t}\n\t// If only old segments are present, nest them in an outer span element.\n\telse if (oldSegments.length > 0) {\n\t\tconst oldWrapper = React.createElement('span', { className: `${modifiedClassPrefix}old-wrapper` }, ...oldSegments);\n\n\t\tconst fullWrapper = React.createElement('span', { className: `${modifiedClassPrefix}full-wrapper` }, oldWrapper);\n\t\trenderedSegments.push(fullWrapper);\n\t}\n\t// If only new segments are present, nest them in an outer span element.\n\telse if (newSegments.length > 0) {\n\t\tconst newWrapper = React.createElement('span', { className: `${modifiedClassPrefix}new-wrapper` }, ...newSegments);\n\n\t\tconst fullWrapper = React.createElement('span', { className: `${modifiedClassPrefix}full-wrapper` }, newWrapper);\n\t\trenderedSegments.push(fullWrapper);\n\t}\n\n\treturn renderedSegments;\n}\n\n/*\n * Escape pure whitespace segments.\n * React nodes with inner text containing only whitespace need the whitespace escaped with the html space entity.\n * This ensures that the whitespace will display in the diff.\n */\nfunction escapeHtmlWhitespace(s: string): string {\n\tlet escapedString = s;\n\tif (s.trim() === '') {\n\t\tescapedString = s.replace(/\\s/g, '\\u00A0');\n\t}\n\n\treturn escapedString;\n}\t\n\n// Processes text modification data, creates and collects react nodes for displaying text diffs\nfunction processModAssignment(\n\tmodData: ModificationData[],\n\tprop: string,\n\tdiffNode: YeastChild,\n\trenderedSegments: ReactNode[],\n\tdiffSource: DiffSource\n) {\n\t// Initialize css class suffixes.\n\tlet innerClassSuffix: string;\n\tlet outerClassSuffix: string;\n\tif (diffSource === DiffSource.Old) {\n\t\tinnerClassSuffix = 'removed';\n\t\touterClassSuffix = 'old';\n\t} else {\n\t\tinnerClassSuffix = 'added';\n\t\touterClassSuffix = 'new';\n\t}\n\n\t/*\n\t * Initialize the start and end indices.\n\t * If processing modification data of text from the old node, start at 0 and stop at the diff pivot.\n\t * If processing the same from the new node, start at the diff pivot and stop at the end of the string.\n\t */\n\tlet startIndex: number;\n\tlet endIndex: number;\n\tif (diffSource === DiffSource.Old) {\n\t\tstartIndex = 0;\n\t\tendIndex = diffNode.diffPivots[prop];\n\t} else {\n\t\tstartIndex = diffNode.diffPivots[prop];\n\t\tendIndex = diffNode[prop].length;\n\t}\n\n\t// If no modification data is present, inject the entire segment into a span and return.\n\tif (modData.length === 0) {\n\t\tconst postSegment: ReactNode = React.createElement(\n\t\t\t'span',\n\t\t\t{ className: `${modifiedClassPrefix}${outerClassSuffix}` },\n\t\t\tescapeHtmlWhitespace(diffNode[prop].substring(startIndex, endIndex))\n\t\t);\n\t\trenderedSegments.push(postSegment);\n\n\t\treturn;\n\t}\n\n\t// Process the modification data.\n\tfor (let i: number = 0; i < modData.length; i++) {\n\t\tconst isFirstModOffset: boolean = i === 0 && modData[0].startIndex > startIndex;\n\n\t\t// If there are characters before the first modification, treat those as the first segment.\n\t\tif (isFirstModOffset) {\n\t\t\tconst preSegment: ReactNode = React.createElement(\n\t\t\t\t'span',\n\t\t\t\t{ className: `${modifiedClassPrefix}${outerClassSuffix}` },\n\t\t\t\tescapeHtmlWhitespace(diffNode[prop].substring(startIndex, modData[0].startIndex))\n\t\t\t);\n\t\t\trenderedSegments.push(preSegment);\n\t\t}\n\n\t\t// Construct a node for the span indicated by the modification data.\n\t\tconst segment: ReactNode = React.createElement(\n\t\t\t'span',\n\t\t\t{ className: `diff-${innerClassSuffix}` },\n\t\t\tescapeHtmlWhitespace(diffNode[prop].substring(modData[i].startIndex, modData[i].endIndex))\n\t\t);\n\t\trenderedSegments.push(segment);\n\n\t\tconst isLastMod: boolean = i === modData.length - 1;\n\t\tconst isLastModOffset: boolean = modData[i].endIndex < diffNode[prop].length;\n\t\tconst isConsecutive: boolean = !isLastMod && modData[i + 1].startIndex - modData[i].endIndex === 0;\n\n\t\t// If there are chars remaining after the last modification, treat those as the last segment.\n\t\tif (isLastMod && isLastModOffset) {\n\t\t\tconst postSegment: ReactNode = React.createElement(\n\t\t\t\t'span',\n\t\t\t\t{ className: `${modifiedClassPrefix}${outerClassSuffix}` },\n\t\t\t\tescapeHtmlWhitespace(diffNode[prop].substring(modData[i].endIndex, endIndex))\n\t\t\t);\n\t\t\trenderedSegments.push(postSegment);\n\t\t}\n\t\t// If this is not the last modification, and there are chars between the current and next mod, add a segment for those gap chars.\n\t\telse if (!isConsecutive && !isLastMod) {\n\t\t\tconst postSegmentEndIndex: number = modData[i + 1].startIndex;\n\t\t\tconst postSegment: ReactNode = React.createElement(\n\t\t\t\t'span',\n\t\t\t\t{ className: `${modifiedClassPrefix}${outerClassSuffix}` },\n\t\t\t\tescapeHtmlWhitespace(diffNode[prop].substring(modData[i].endIndex, postSegmentEndIndex))\n\t\t\t);\n\t\t\trenderedSegments.push(postSegment);\n\t\t}\n\t}\n}\n\n/*\n * Splits a diff node with text modifications into before and after nodes.\n * This is needed under the following circumstances\n * 1) A diff node has a text modification on a property where classes/nodes cannot be injected to display the diff side-by-side.\n * 2) As a result, the node will be split and displayed as before and after nodes to show modification on the whole node instead of just the localized text diff.\n * 3) Sometimes, this method fails because the node contains children with text modification that are displayed side-by-side, and thus there are duplicate text mods (in both before and after nodes).\n * 4) To combat that case, this function is used to split those inner child text mods and segregate them to the before and after nodes.\n */\nexport function separateDiffChildren(node: YeastNode): { oldChildren: YeastChild[]; newChildren: YeastChild[] } {\n\t// init\n\tlet children: YeastChild[] = node.children;\n\tconst oldChildren: YeastChild[] = [];\n\tconst newChildren: YeastChild[] = [];\n\n\t// Iterate throught the child nodes.\n\tif (children && children.length > 0) {\n\t\tfor (const child of children) {\n\t\t\t// Make an \"old\" and \"new\" copy of the unified diff node.\n\t\t\tlet oldChild: YeastChild = Object.assign({}, child);\n\t\t\tlet newChild: YeastChild = Object.assign({}, child);\n\n\t\t\t// If the child has or contains text modifications, further processing is needed.\n\t\t\tif (child.hasDiff && (child.isTextModification || child.containsDiff)) {\n\t\t\t\t// init\n\t\t\t\tconst mods: ModificationDiffMap = child.diffMods;\n\t\t\t\tconst pivots: DiffPivotMap = child.diffPivots;\n\t\t\t\tconst oldModDiffMap: ModificationDiffMap = {};\n\t\t\t\tconst newModDiffMap: ModificationDiffMap = {};\n\t\t\t\tconst rebasedPivots: DiffPivotMap = {};\n\n\t\t\t\t// If the child has a text modification at the current level, commence splitting.\n\t\t\t\tconst shouldProcess: boolean = child.isTextModification && mods && Object.keys(mods)?.length > 0;\n\t\t\t\tif (shouldProcess) {\n\t\t\t\t\t// Iterate through the diff mods.\n\t\t\t\t\tfor (const [textProp, modData] of Object.entries(mods)) {\n\t\t\t\t\t\t// Obtain the matching pivot index separated the old and new strings.\n\t\t\t\t\t\tconst pivot: number = pivots[textProp] || 0;\n\n\t\t\t\t\t\t// Segregate the old and new strings.\n\t\t\t\t\t\tconst oldString: string = child[textProp].substring(0, pivot);\n\t\t\t\t\t\tconst newString: string = child[textProp].substring(pivot);\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * The modification data for the separated diff nodes is going to be processed again downstream by the getDiffRenderData function when the child nodes are rendered.\n\t\t\t\t\t\t * Therefore, the modification data for the new node needs to be rebased by subtracting each index by the pivot, and the pivot becomes 0.\n\t\t\t\t\t\t * That's because the old and new strings are no longer concatenated.\n\t\t\t\t\t\t * The old modification data oesn't need the same adjustment, because the old string comes first in the concatenated string.\n\t\t\t\t\t\t */\n\t\t\t\t\t\trebasedPivots[textProp] = 0;\n\t\t\t\t\t\tlet oldData: ModificationData[] = (modData as ModificationAssignment).oldModData;\n\t\t\t\t\t\tlet newData: ModificationData[] = (modData as ModificationAssignment).newModData.map((data: ModificationData) => {\n\t\t\t\t\t\t\tconst rebasedData: ModificationData = Object.assign({}, data);\n\t\t\t\t\t\t\trebasedData.startIndex = data.startIndex - pivot;\n\t\t\t\t\t\t\trebasedData.endIndex = data.endIndex - pivot;\n\n\t\t\t\t\t\t\treturn rebasedData;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// The old node only needs the old mod data.\n\t\t\t\t\t\tlet oldAssignment: ModificationAssignment = {\n\t\t\t\t\t\t\toldModData: oldData,\n\t\t\t\t\t\t\tnewModData: [],\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// The new node only needs the old mod data.\n\t\t\t\t\t\tlet newAssignment: ModificationAssignment = {\n\t\t\t\t\t\t\toldModData: [],\n\t\t\t\t\t\t\tnewModData: newData,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// append data\n\t\t\t\t\t\toldModDiffMap[textProp] = oldAssignment;\n\t\t\t\t\t\tnewModDiffMap[textProp] = newAssignment;\n\t\t\t\t\t\toldChild[textProp] = oldString;\n\t\t\t\t\t\tnewChild[textProp] = newString;\n\t\t\t\t\t}\n\n\t\t\t\t\t// append data\n\t\t\t\t\toldChild.diffMods = oldModDiffMap;\n\t\t\t\t\toldChild.diffPivots = pivots;\n\n\t\t\t\t\tnewChild.diffMods = newModDiffMap;\n\t\t\t\t\tnewChild.diffPivots = rebasedPivots;\n\t\t\t\t}\n\n\t\t\t\t// If the current child has no text modification, but contains a text modification within its children, recursively call the function to process them.\n\t\t\t\tif (isYeastNode(child)) {\n\t\t\t\t\tconst separatedChildren = separateDiffChildren(child);\n\t\t\t\t\tif (separatedChildren.oldChildren) (oldChild as YeastNode).children = separatedChildren.oldChildren;\n\t\t\t\t\tif (separatedChildren.newChildren) (newChild as YeastNode).children = separatedChildren.newChildren;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// append\n\t\t\toldChildren.push(oldChild);\n\t\t\tnewChildren.push(newChild);\n\t\t}\n\t}\n\n\t// Return the separated children.\n\treturn {\n\t\toldChildren,\n\t\tnewChildren,\n\t};\n}\n","import React, { ReactFragment } from 'react';\nimport { BlockCodeNode } from 'yeast-core';\nimport { CodeFence } from 'genesys-react-components';\nimport { useKey } from '../helpers/useKey';\nimport { ReactRenderer } from '../ReactRenderer';\nimport { getDiffRenderData, DiffRenderData } from '../helpers/diff';\n\ninterface IProps {\n\tnode: BlockCodeNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function BlockCodeNodeRenderer(props: IProps) {\n\tlet oldTitle: string = props.node.title;\n\tlet newTitle: string = props.node.title;\n\tlet oldValue: string = props.node.value;\n\tlet newValue: string = props.node.value;\n\tlet className: string = '';\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tif (diffRenderData) {\n\t\tclassName += `diff-block-padding ${diffRenderData.diffClass}`;\n\t\tif (diffRenderData.renderedStrings) {\n\t\t\tif (diffRenderData.renderedStrings['title']) {\n\t\t\t\toldTitle = diffRenderData.renderedStrings['title'].oldString;\n\t\t\t\tnewTitle = diffRenderData.renderedStrings['title'].newString;\n\t\t\t}\n\t\t\tif (diffRenderData.renderedStrings['value']) {\n\t\t\t\toldValue = diffRenderData.renderedStrings['value'].oldString;\n\t\t\t\tnewValue = diffRenderData.renderedStrings['value'].newString;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst key = useKey();\n\tlet value = props.node.value;\n\tif (props.node.tabsToSpaces) {\n\t\tlet spaces = ' ';\n\t\tspaces = spaces.repeat(props.node.tabsToSpaces);\n\t\tvalue = props.node.value.replace(/\\t/gi, spaces);\n\t}\n\tconst indentation = props.node.indentation ? props.node.indentation.toString() : '';\n\treturn diffRenderData && diffRenderData.renderedStrings ? (\n\t\t<React.Fragment>\n\t\t\t<CodeFence\n\t\t\t\tkey={key.current}\n\t\t\t\tvalue={oldValue}\n\t\t\t\tlanguage={props.node.language}\n\t\t\t\ttitle={oldTitle}\n\t\t\t\tautoCollapse={props.node.autoCollapse}\n\t\t\t\tnoCollapse={props.node.noCollapse}\n\t\t\t\tshowLineNumbers={props.node.showLineNumbers}\n\t\t\t\tindentation={indentation}\n\t\t\t\tclassName=\"diff-modified-old diff-block-old\"\n\t\t\t/>\n\t\t\t<CodeFence\n\t\t\t\tkey={key.current}\n\t\t\t\tvalue={newValue}\n\t\t\t\tlanguage={props.node.language}\n\t\t\t\ttitle={newTitle}\n\t\t\t\tautoCollapse={props.node.autoCollapse}\n\t\t\t\tnoCollapse={props.node.noCollapse}\n\t\t\t\tshowLineNumbers={props.node.showLineNumbers}\n\t\t\t\tindentation={indentation}\n\t\t\t\tclassName=\"diff-modified-new diff-block-new\"\n\t\t\t/>\n\t\t</React.Fragment>\n\t) : (\n\t\t<CodeFence\n\t\t\tkey={key.current}\n\t\t\tvalue={value}\n\t\t\tlanguage={props.node.language}\n\t\t\ttitle={props.node.title}\n\t\t\tautoCollapse={props.node.autoCollapse}\n\t\t\tnoCollapse={props.node.noCollapse}\n\t\t\tshowLineNumbers={props.node.showLineNumbers}\n\t\t\tindentation={indentation}\n\t\t\tclassName={className}\n\t\t/>\n\t);\n}\n","import React from 'react';\nimport { BlockquoteNode } from 'yeast-core';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { useKey } from '../helpers/useKey';\n\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: BlockquoteNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function BlockQuoteNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\treturn <blockquote key={key.current} className={className}>{props.renderer.renderComponents(props.node.children)}</blockquote>;\n}\n","import React from 'react';\nimport { BoldNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { ReactRenderer } from '../ReactRenderer';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\n\ninterface IProps {\n\tnode: BoldNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function BoldNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\treturn <strong key={key.current} className={className}>{props.renderer.renderComponents(props.node.children)}</strong>;\n}\n","import React from 'react';\nimport { CalloutNode } from 'yeast-core';\nimport { AlertBlock } from 'genesys-react-components';\n\nimport { ReactRenderer } from '../ReactRenderer';\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData, separateDiffChildren } from '../helpers/diff';\n\ninterface IProps {\n\tnode: CalloutNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function CalloutNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\t\n\tlet oldTitle: string = props.node.title;\n\tlet newTitle: string = props.node.title;\n\tlet oldDiffChildren = [];\n\tlet newDiffChildren = [];\n\t\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = props.node.className || '';\n\n\tif (diffRenderData) {\n\t\tclassName += ' diff-block-padding';\n\n\t\tif (diffRenderData.renderedStrings && diffRenderData.renderedStrings['title']) {\n\t\t\tconst { oldChildren, newChildren } = separateDiffChildren(props.node);\n\t\t\toldDiffChildren = oldChildren;\n\t\t\tnewDiffChildren = newChildren;\n\t\t\toldTitle = diffRenderData.renderedStrings['title'].oldString;\n\t\t\tnewTitle = diffRenderData.renderedStrings['title'].newString;\n\t\t}\n\t}\n\n\treturn diffRenderData && diffRenderData.renderedStrings \n\t\t? (\n\t\t\t<React.Fragment>\n\t\t\t\t<AlertBlock\n\t\t\t\t\tkey={key.current}\n\t\t\t\t\talertType={props.node.alertType}\n\t\t\t\t\ttitle={oldTitle}\n\t\t\t\t\tcollapsible={props.node.collapsible}\n\t\t\t\t\tautoCollapse={props.node.autoCollapse}\n\t\t\t\t\tindentation={props.node.indentation}\n\t\t\t\t\tclassName={`${className} diff-modified-old diff-block-old`}\n\t\t\t\t>\n\t\t\t\t\t{props.renderer.renderComponents(oldDiffChildren)}\n\t\t\t\t</AlertBlock>\n\t\t\t\t<AlertBlock\n\t\t\t\t\tkey={key.current}\n\t\t\t\t\talertType={props.node.alertType}\n\t\t\t\t\ttitle={newTitle}\n\t\t\t\t\tcollapsible={props.node.collapsible}\n\t\t\t\t\tautoCollapse={props.node.autoCollapse}\n\t\t\t\t\tindentation={props.node.indentation}\n\t\t\t\t\tclassName={`${className} diff-modified-new diff-block-new`}\n\t\t\t\t>\n\t\t\t\t\t{props.renderer.renderComponents(newDiffChildren)}\n\t\t\t\t</AlertBlock>\n\t\t\t</React.Fragment>\n\t\t) : (\n\t\t\t<AlertBlock\n\t\t\t\tkey={key.current}\n\t\t\t\talertType={props.node.alertType}\n\t\t\t\ttitle={props.node.title}\n\t\t\t\tcollapsible={props.node.collapsible}\n\t\t\t\tautoCollapse={props.node.autoCollapse}\n\t\t\t\tindentation={props.node.indentation}\n\t\t\t\tclassName={className}\n\t\t\t>\n\t\t\t\t{props.renderer.renderComponents(props.node.children)}\n\t\t\t</AlertBlock>\n\t\t);\n}\n","import React from 'react';\nimport { ContentGroupNode } from 'yeast-core';\nimport { DxAccordionGroup, DxTabbedContent } from 'genesys-react-components';\n\nimport { ReactRenderer } from '../ReactRenderer';\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\n\ninterface IProps {\n\tnode: ContentGroupNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function ContentGroupNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\tif (props.node.groupType === 'accordion') {\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<DxAccordionGroup key={key.current}>{props.renderer.renderComponents(props.node.children)}</DxAccordionGroup>;\n\t\t\t</div>\n\t\t);\n\t} else if (props.node.groupType === 'tabbedcontent') {\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<DxTabbedContent key={key.current}>{props.renderer.renderComponents(props.node.children)}</DxTabbedContent>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { HeadingNode } from 'yeast-core';\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: HeadingNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function HeadingNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\tconst level = props.node.level >= 1 && props.node.level <= 7 && props.node.level % 1 === 0 ? props.node.level : 1;\n\tif (level === 7) {\n\t\treturn (\n\t\t\t<span className={`h7 ${className}`} key={key.current} id={props.node.id} >\n\t\t\t\t{props.renderer.renderComponents(props.node.children)}\n\t\t\t</span>\n\t\t);\n\t} else {\n\t\treturn React.createElement<any>(\n\t\t\t`h${level}`,\n\t\t\t{ key: key.current, id: props.node.id, className },\n\t\t\tprops.renderer.renderComponents(props.node.children)\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { ImageNode } from 'yeast-core';\nimport { v4 as uuidv4} from 'uuid';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: ImageNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function ImageNodeRenderer(props: IProps) {\n\tconst key1 = useKey();\n\tconst key2 = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tconst className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\tlet oldSrc: string = '';\n\tlet newSrc: string = '';\n\tlet oldAlt: string = '';\n\tlet newAlt: string = '';\n\tlet oldTitle: string = '';\n\tlet newTitle: string = '';\n\n\tif (diffRenderData && diffRenderData.renderedStrings) {\n\t\tif (diffRenderData.renderedStrings['title']) {\n\t\t\toldTitle = diffRenderData.renderedStrings['title'].oldString;\n\t\t\tnewTitle = diffRenderData.renderedStrings['title'].newString;\n\t\t}\n\t\telse if (props.node?.title) {\n\t\t\toldTitle = props.node.title;\n\t\t\tnewTitle = oldTitle;\n\t\t}\n\t\tif (diffRenderData.renderedStrings['alt']) {\n\t\t\toldAlt = diffRenderData.renderedStrings['alt'].oldString;\n\t\t\tnewAlt = diffRenderData.renderedStrings['alt'].newString;\n\t\t}\n\t\telse if (props.node?.alt) {\n\t\t\toldAlt = props.node.alt;\n\t\t\tnewAlt = oldAlt;\n\t\t}\n\t\tif (diffRenderData.renderedStrings['src']) {\n\t\t\toldSrc = diffRenderData.renderedStrings['src'].oldString;\n\t\t\tnewSrc = diffRenderData.renderedStrings['src'].newString;\n\t\t}\n\t\telse if (props.node?.src) {\n\t\t\toldSrc = props.node.src;\n\t\t\tnewSrc = oldSrc;\n\t\t}\n\t}\n\n\treturn diffRenderData && diffRenderData.renderedStrings\n\t\t? (\n\t\t\t<React.Fragment>\n\t\t\t\t<img key={key1.current} alt={oldAlt} src={oldSrc} title={oldTitle} className={className}/>\n\t\t\t\t<img key={key2.current} alt={newAlt} src={newSrc} title={newTitle} className={className}/>\n\t\t\t</React.Fragment>\n\t\t)\n\t\t: <img key={key1.current} alt={props.node.alt} src={props.node.src} title={props.node.title} className={className} />\n}\n","import React from 'react';\nimport { InlineCodeNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: InlineCodeNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function InlineCodeNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\treturn <code key={key.current} className={className}>{props.renderer.renderComponents(props.node.children)}</code>;\n}\n","import React from 'react';\nimport { ItalicNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: ItalicNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function ItalicNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\treturn <em className={className} key={key.current}>{props.renderer.renderComponents(props.node.children)}</em>;\n}\n","import React from 'react';\nimport { LinkNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: LinkNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function LinkNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tlet oldTitle: string = props.node.title;\n\tlet newTitle: string = props.node.title;\n\t\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tif (diffRenderData && diffRenderData.renderedStrings) {\n\t\tif (diffRenderData.renderedStrings['title']) {\n\t\t\toldTitle = diffRenderData.renderedStrings['title'].oldString;\n\t\t\tnewTitle = diffRenderData.renderedStrings['title'].newString;\n\t\t}\n\t}\n\n\tconst className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\tif (props.node.forceNewTab) {\n\t\treturn diffRenderData && diffRenderData.renderedStrings \n\t\t\t? (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<a className='diff-modified-old' key={key.current} href={props.node.href} target=\"_blank\" rel=\"noreferrer\" title={oldTitle}>\n\t\t\t\t\t\t{props.renderer.renderComponents(props.node.children)} (TAB)\n\t\t\t\t\t</a>\n\t\t\t\t\t<a className='diff-modified-new' key={key.current} href={props.node.href} target=\"_blank\" rel=\"noreferrer\" title={newTitle}>\n\t\t\t\t\t\t{props.renderer.renderComponents(props.node.children)} (TAB)\n\t\t\t\t\t</a>\n\t\t\t\t</React.Fragment>\n\t\t\t) : (\n\t\t\t\t<a className={className} key={key.current} href={props.node.href} target=\"_blank\" rel=\"noreferrer\" title={props.node.title}>\n\t\t\t\t\t{props.renderer.renderComponents(props.node.children)} (TAB)\n\t\t\t\t</a>\n\t\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<a key={key.current} href={props.node.href} title={props.node.title}>\n\t\t\t\t{props.renderer.renderComponents(props.node.children)}\n\t\t\t</a>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { ListItemNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: ListItemNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function ListItemNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\treturn <li key={key.current} className={className}>{props.renderer.renderComponents(props.node.children)}</li>;\n}\n","import React from 'react';\nimport { ListNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\n\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: ListNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function ListNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\t/*\n\t * The explicit boolean check prevents the case where a custom node has ordered value \"false\" which evaluates as truthy.\n\t * Custom nodes get parsed from xml and the ordered property is parsed as a string.\n\t * This can happen because TypeScript types only exist at compile time.\n\t */ \n\tif (props.node.ordered === true || props.node.ordered as any === 'true') {\n\t\treturn (\n\t\t\t<ol key={key.current} start={props.node.start || 1} className={className}>\n\t\t\t\t{props.renderer.renderComponents(props.node.children)}\n\t\t\t</ol>\n\t\t);\n\t} else {\n\t\treturn <ul key={key.current} className={className}>{props.renderer.renderComponents(props.node.children)}</ul>;\n\t}\n}\n","import React from 'react';\nimport { ParagraphNode } from 'yeast-core';\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: ParagraphNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function ParagraphNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tconst baseClass: string = `${props.node.indentation && props.node.indentation > 0 ? ` indent-${props.node.indentation}` : ''}`;\n\tlet className: string = diffRenderData ? baseClass + ' ' + diffRenderData.diffClass : baseClass;\n\n\treturn (\n\t\t<p className={className} key={key.current}>\n\t\t\t{props.renderer.renderComponents(props.node.children)}\n\t\t</p>\n\t);\n}\n","import React from 'react';\nimport { StrikethroughNode } from 'yeast-core';\n\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\n\nimport { ReactRenderer } from '../ReactRenderer';\n\ninterface IProps {\n\tnode: StrikethroughNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function StrikethroughNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? diffRenderData.diffClass : '';\n\n\treturn <s className={className} key={key.current}>{props.renderer.renderComponents(props.node.children)}</s>;\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport { TableNode, YeastBlockNodeTypes } from 'yeast-core';\n\nimport { ReactRenderer } from '../ReactRenderer';\nimport { useKey } from '../helpers/useKey';\n\nimport { DataTable, DataTableRow, DataTableCell } from 'genesys-react-components';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\n\nimport '../styles/Table.scss';\n\ninterface IProps {\n\tnode: TableNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function TableNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\tlet headerRow;\n\tlet rows;\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = diffRenderData ? `table-${key.current} ${diffRenderData.diffClass}` : '';\n\t\n\tconst getContent = (node: any): string => {\n\t\tif (!node.children && !node.text) {\n\t\t\treturn '';\n\t\t}\n\t\tif (!node.children) {\n\t\t\treturn node.text;\n\t\t}\n\n\t\tlet content = [];\n\t\tfor (let index = 0; index < node.children.length; index++) {\n\t\t\tcontent.push(getContent(node.children[index]));\n\t\t}\n\t\treturn content.join(' ');\n\t};\n\n\tif (props.node.children[0].header) {\n\t\theaderRow = { cells: [] };\n\t\tprops.node.children[0].children.forEach((child) => {\n\t\t\theaderRow.cells.push({\n\t\t\t\trenderedContent: <>{props.renderer.renderComponents(child.children)}</>,\n\t\t\t\tcontent: getContent(child),\n\t\t\t\talign: child.align,\n\t\t\t});\n\t\t});\n\t}\n\n\tlet tableRowsContent = headerRow ? props.node.children.slice(1) : props.node.children;\n\tif (props.node.children) {\n\t\trows = [];\n\t\ttableRowsContent.forEach((row, i) => {\n\t\t\tif (row.type == YeastBlockNodeTypes.TableRow) {\n\t\t\t\tconst rowDiffData: DiffRenderData = getDiffRenderData(row);\n\t\t\t\tlet rowClass: string = rowDiffData ? rowDiffData.diffClass : '';\n\t\t\t\tlet childRow = { cells: [] } as DataTableRow;\n\t\t\t\tif (rowClass) childRow.className = rowClass;\n\t\t\t\t\n\t\t\t\trow.children.forEach((childCell) => {\n\t\t\t\t\tconst cellDiffData: DiffRenderData = getDiffRenderData(childCell);\n\t\t\t\t\tlet cellDiffClass: string = cellDiffData ? cellDiffData.diffClass : '';\n\t\t\t\t\tlet renderedContent: React.ReactNode;\n\t\t\t\t\trenderedContent = <>{props.renderer.renderComponents(childCell.children)}</>;\n\t\t\t\t\tconst content = getContent(childCell);\n\t\t\t\t\tconst cell: DataTableCell = {\n\t\t\t\t\t\trenderedContent,\n\t\t\t\t\t\tcontent: content.length == 0 ? 'default content' : content,\n\t\t\t\t\t}\n\t\t\t\t\tif (cellDiffClass) cell.className = cellDiffClass;\n\t\t\t\t\tif (childCell.align === 'left' || childCell.align ==='right' || childCell.align === 'center') {\n\t\t\t\t\t\tcell.align = childCell.align;\n\t\t\t\t\t}\n\t\t\t\t\tchildRow.cells.push(cell);\n\t\t\t\t});\n\t\t\t\trows.push(childRow);\n\t\t\t}\n\t\t});\n\t}\n\treturn (\n\t\t<DataTable\n\t\t\tkey={key.current}\n\t\t\theaderRow={headerRow}\n\t\t\trows={rows}\n\t\t\tsortable={props.node.sortable}\n\t\t\tindentation={props.node.indentation}\n\t\t\tfilterable={props.node.filterable}\n\t\t\tclassName={className}\n\t\t/>\n\t);\n}\n","import React from 'react';\nimport { HorizontalRuleNode } from 'yeast-core';\nimport { ReactRenderer } from '../ReactRenderer';\nimport { useKey } from '../helpers/useKey';\nimport { DiffRenderData, getDiffRenderData } from '../helpers/diff';\n\ninterface IProps {\n\tnode: HorizontalRuleNode;\n\trenderer: ReactRenderer;\n}\n\nexport default function HorizontalRuleNodeRenderer(props: IProps) {\n\tconst key = useKey();\n\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.node);\n\tlet className: string = 'diff-block-padding';\n\tif (diffRenderData) {\n\t\tclassName += ` ${diffRenderData.diffClass}`;\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<hr key={key.current} />\n\t\t\t</div>\n\t\t)\n\t}\n\n\treturn <hr className={className} key={key.current} />;\n}\n","import { DxAccordion, DxTabPanel } from 'genesys-react-components';\nimport './styles/ReactRenderer.scss';\nimport React, { ReactNode } from 'react';\nimport {\n\tYeastBlockNodeTypes,\n\tParagraphNode,\n\tHeadingNode,\n\tListNode,\n\tListItemNode,\n\tYeastInlineNodeTypes,\n\tBoldNode,\n\tItalicNode,\n\tInlineCodeNode,\n\tBlockCodeNode,\n\tLinkNode,\n\tCalloutNode,\n\tTableNode,\n\tImageNode,\n\tBlockquoteNode,\n\tContentGroupNode,\n\tContentGroupItemNode,\n\tStrikethroughNode,\n\tYeastChild,\n\tYeastText,\n\tYeastBlockNode,\n\tYeastInlineNode,\n\tHorizontalRuleNode,\n\tisYeastTextNode,\n} from 'yeast-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport BlockCodeNodeRenderer from './YeastNodeTypes/BlockCodeNodeRenderer';\nimport BlockQuoteNodeRenderer from './YeastNodeTypes/BlockQuoteNodeRenderer';\nimport BoldNodeRenderer from './YeastNodeTypes/BoldNodeRenderer';\nimport CalloutNodeRenderer from './YeastNodeTypes/CalloutNodeRenderer';\nimport ContentGroupNodeRenderer from './YeastNodeTypes/ContentGroupNodeRenderer';\nimport HeadingNodeRenderer from './YeastNodeTypes/HeadingNodeRenderer';\nimport ImageNodeRenderer from './YeastNodeTypes/ImageNodeRenderer';\nimport InlineCodeNodeRenderer from './YeastNodeTypes/InlineCodeNodeRenderer';\nimport ItalicNodeRenderer from './YeastNodeTypes/ItalicNodeRenderer';\nimport LinkNodeRenderer from './YeastNodeTypes/LinkNodeRenderer';\nimport ListItemNodeRenderer from './YeastNodeTypes/ListItemNodeRenderer';\nimport ListNodeRenderer from './YeastNodeTypes/ListNodeRenderer';\nimport ParagraphNodeRenderer from './YeastNodeTypes/PragraphNodeRenderer';\nimport StrikethroughNodeRenderer from './YeastNodeTypes/StrikethroughNodeRenderer';\nimport TableNodeRenderer from './YeastNodeTypes/TableNodeRenderer';\nimport HorizontalRuleNodeRenderer from './YeastNodeTypes/HorizontalRuleNodeRenderer';\n\nimport { DiffRenderData, getDiffRenderData } from './helpers/diff';\n\nconst TILDE_REGEX = /\\\\~/g;\n\nexport interface NodeRendererPlugin {\n\t(node: YeastChild, renderer: ReactRenderer): ReactNode | undefined;\n}\n\nexport type NodeRendererMapKeys = YeastBlockNodeTypes | YeastInlineNodeTypes | string;\nexport type NodeRendererMap = {\n\t[nodeType in NodeRendererMapKeys]: NodeRendererPlugin | undefined;\n};\n\nexport type RenderComponentsFunction = {\n\t(nodes: YeastChild[] | undefined, renderers: NodeRendererMap, unhandledNodeRenderer?: NodeRendererPlugin): ReactNode;\n};\n\nexport class ReactRenderer {\n\tdefaultRenderers: NodeRendererMap = {\n\t\t[YeastBlockNodeTypes.Paragraph]: (node: ParagraphNode, renderer: ReactRenderer) => {\n\t\t\treturn <ParagraphNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.Heading]: (node: HeadingNode, renderer: ReactRenderer) => {\n\t\t\treturn <HeadingNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.List]: (node: ListNode, renderer: ReactRenderer) => {\n\t\t\treturn <ListNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.ListItem]: (node: ListItemNode, renderer: ReactRenderer) => {\n\t\t\treturn <ListItemNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastInlineNodeTypes.Bold]: (node: BoldNode, renderer: ReactRenderer) => {\n\t\t\treturn <BoldNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastInlineNodeTypes.Italic]: (node: ItalicNode, renderer: ReactRenderer) => {\n\t\t\treturn <ItalicNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastInlineNodeTypes.Code]: (node: InlineCodeNode, renderer: ReactRenderer) => {\n\t\t\treturn <InlineCodeNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.Code]: (node: BlockCodeNode, renderer: ReactRenderer) => {\n\t\t\treturn <BlockCodeNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastInlineNodeTypes.Link]: (node: LinkNode, renderer: ReactRenderer) => {\n\t\t\treturn <LinkNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.Callout]: (node: CalloutNode, renderer: ReactRenderer) => {\n\t\t\treturn <CalloutNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.Table]: (node: TableNode, renderer: ReactRenderer) => {\n\t\t\treturn <TableNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastInlineNodeTypes.Image]: (node: ImageNode, renderer: ReactRenderer) => {\n\t\t\treturn <ImageNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.HorizontalRule]: (node: HorizontalRuleNode, renderer: ReactRenderer) => {\n\t\t\treturn <HorizontalRuleNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.Blockquote]: (node: BlockquoteNode, renderer: ReactRenderer) => {\n\t\t\treturn <BlockQuoteNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.ContentGroup]: (node: ContentGroupNode, renderer: ReactRenderer) => {\n\t\t\treturn <ContentGroupNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t\t[YeastBlockNodeTypes.ContentGroupItem]: (node: ContentGroupItemNode, renderer: ReactRenderer) => {\n\t\t\tif (node.groupType === 'accordion') {\n\t\t\t\treturn <DxAccordion title={node.title}>{renderer.renderComponents(node.children)}</DxAccordion>;\n\t\t\t} else if (node.groupType === 'tabbedcontent') {\n\t\t\t\treturn <DxTabPanel title={node.title}>{renderer.renderComponents(node.children)}</DxTabPanel>;\n\t\t\t}\n\t\t},\n\t\t[YeastInlineNodeTypes.Strikethrough]: (node: StrikethroughNode, renderer: ReactRenderer) => {\n\t\t\treturn <StrikethroughNodeRenderer key={uuidv4()} node={node} renderer={renderer} />;\n\t\t},\n\t};\n\tcustomRenderers?: NodeRendererMap;\n\tunhandledNodeRenderer?: NodeRendererPlugin;\n\n\tconstructor(customRenderers?: NodeRendererMap) {\n\t\tthis.customRenderers = customRenderers;\n\t}\n\n\trenderComponents(nodes: YeastChild[] | undefined): ReactNode {\n\t\tif (!nodes) return;\n\t\treturn nodes.map((node, i) => {\n\t\t\t// Render the node using custom renderers\n\t\t\tlet rendered = this.renderComponent(node, this.customRenderers);\n\t\t\tif (!!rendered) return rendered;\n\n\t\t\t// Render the node using defaults\n\t\t\trendered = this.renderComponent(node, this.defaultRenderers);\n\t\t\tif (!!rendered) return rendered;\n\n\t\t\t// Fallback to custom unhandled renderer\n\t\t\tif (!rendered && this.unhandledNodeRenderer) {\n\t\t\t\trendered = this.unhandledNodeRenderer(node, this);\n\t\t\t\tif (!!rendered) return rendered;\n\t\t\t}\n\n\t\t\t// Final fallback to default unhandled renderer\n\t\t\tif (isYeastTextNode(node)) {\n\t\t\t\tconst diffRenderData: DiffRenderData = getDiffRenderData(node);\n\t\t\t\tconst typedNode = node as YeastText;\n\t\t\t\tconst processedText = typedNode.text.replace(TILDE_REGEX, '~');\n\t\t\t\treturn diffRenderData && diffRenderData.renderedNodes\n\t\t\t\t\t? <React.Fragment key={i}>{diffRenderData.renderedNodes['text']}</React.Fragment>\n\t\t\t\t\t: <React.Fragment key={i}>{processedText}</React.Fragment>;\n\t\t\t} else {\n\t\t\t\tconsole.warn('Unhandled node', node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\t}\n\n\trenderComponent(node: YeastChild, renderers: NodeRendererMap): ReactNode {\n\t\tif (!node || !renderers) return;\n\n\t\t// Untyped nodes aren't handled here\n\t\tif (!(node as any).type) return;\n\n\t\tconst typedNode = Object.assign({}, node as YeastBlockNode | YeastInlineNode);\n\t\ttypedNode.children = typedNode.children || [];\n\n\t\t// Process renderers\n\t\tlet component: ReactNode;\n\t\tObject.entries(renderers).some(([nodeType, plugin]) => {\n\t\t\tif (typedNode.type.toLowerCase() === nodeType.toLowerCase()) {\n\t\t\t\tcomponent = plugin(node, this);\n\t\t\t}\n\t\t\treturn !!component;\n\t\t});\n\n\t\t// Return whatever was assigned\n\t\treturn component;\n\t}\n}\n","import React, { useEffect, useState } from 'react';\nimport { YeastChild } from 'yeast-core';\nimport { getDiffRenderData, DiffRenderData } from './helpers/diff';\n\nimport { useKey } from './helpers/useKey';\nimport { ReactRenderer, NodeRendererMap } from './ReactRenderer';\n\nexport interface YeastNodeRendererProps {\n\tnodes: YeastChild[];\n\tcustomRenderers?: NodeRendererMap;\n}\n\nexport default function YeastNodeRenderer(props: YeastNodeRendererProps) {\n\tconst key = useKey();\n\tconst [renderer, setRenderer] = useState<ReactRenderer>(new ReactRenderer(props.customRenderers));\n\n\tuseEffect(() => {\n\t\tif (props.customRenderers === renderer.customRenderers) return;\n\t\tsetRenderer(new ReactRenderer(props.customRenderers));\n\t}, [props.customRenderers]);\n\n\treturn <React.Fragment key={key.current}>{renderer.renderComponents(props.nodes)}</React.Fragment>;\n}\n","import React, { ReactNode } from 'react';\nimport { DocumentNode } from 'yeast-core';\n\nimport { NodeRendererMap } from './ReactRenderer';\nimport YeastNodeRenderer from './YeastNodeRenderer';\nimport { getDiffRenderData, DiffRenderData } from './helpers/diff';\n\ninterface IProps {\n\tast: DocumentNode;\n\tclassName?: string;\n\tcustomRenderers?: NodeRendererMap;\n}\n\nexport default function YeastDocumentRenderer(props: IProps) {\n\tconst diffRenderData: DiffRenderData = getDiffRenderData(props.ast);\n\tconst classList: string[] = [];\n\tif (props.className) classList.push(props.className);\n\tif (diffRenderData) classList.push(diffRenderData.diffClass); \n\tconst className: string = classList.join(' ').trim();\n\n\tlet title: ReactNode | string = props.ast?.title || '';\n\tlet author: ReactNode | string | undefined;\n\tif (props.ast?.author) author = props.ast.author;\n\n\tif (diffRenderData && diffRenderData.renderedNodes) {\n\t\tif (diffRenderData.renderedNodes['title']) {\n\t\t\ttitle = diffRenderData.renderedNodes['title'];\n\t\t}\n\t\tif (diffRenderData.renderedNodes['author']) {\n\t\t\tauthor = diffRenderData.renderedNodes['author'];\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t<h1>{title}</h1>\n\t\t\t{author && <h2>{author}</h2>}\n\t\t\t<YeastNodeRenderer nodes={props.ast?.children} customRenderers={props.customRenderers} />\n\t\t</div>\n\t);\n}\n"],"names":["uuidv4"],"mappings":"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"}